{"version":3,"sources":["components/GoogleMap.js","App.js","reportWebVitals.js","index.js"],"names":["MapContainer","props","handleChange","address","setState","handleSelect","geocodeByAddress","then","results","getLatLng","latLng","console","log","mapCenter","catch","error","state","showingInfoWindow","activeMarker","selectedPlace","lat","lng","id","value","this","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description","google","initialCenter","center","position","Component","GoogleApiWrapper","apiKey","App","GoogleMap","Helmet","defer","data-key","src","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAOaA,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAgBRC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAAED,aAlBC,EAqBnBE,aAAe,SAAAF,GACb,EAAKC,SAAS,CAAED,YAChBG,2BAAiBH,GACdI,MAAK,SAAAC,GAAO,OAAIC,oBAAUD,EAAQ,OAClCD,MAAK,SAAAG,GACJC,QAAQC,IAAI,UAAWF,GAGvB,EAAKN,SAAS,CAAES,UAAWH,OAE5BI,OAAM,SAAAC,GAAK,OAAIJ,QAAQI,MAAM,QAASA,OA7BzC,EAAKC,MAAQ,CAEXb,QAAS,GAETc,mBAAmB,EACnBC,aAAc,GACdC,cAAe,GAEfN,UAAW,CACTO,IAAK,WACLC,KAAM,cAZO,EADrB,qDAoCI,OACE,sBAAKC,GAAG,aAAR,UACE,cAAC,IAAD,CACEC,MAAOC,KAAKR,MAAMb,QAClBsB,SAAUD,KAAKtB,aACfwB,SAAUF,KAAKnB,aAHjB,SAKG,gBAAGsB,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,YAAaC,EAA/B,EAA+BA,uBAAwBC,EAAvD,EAAuDA,QAAvD,OACC,gCACE,qCACMH,EAAc,CAChBI,YAAa,oBACbC,UAAW,4BAGf,sBAAKA,UAAU,kCAAf,UACGF,GAAW,6CACXF,EAAYK,KAAI,SAAAC,GACf,IAAMF,EAAYE,EAAWC,OACzB,0BACA,kBAEEC,EAAQF,EAAWC,OACrB,CAAEE,gBAAiB,UAAWC,OAAQ,WACtC,CAAED,gBAAiB,UAAWC,OAAQ,WAC1C,OACE,+CACMT,EAAuBK,EAAY,CACrCF,YACAI,WAHJ,aAME,+BAAOF,EAAWK,6BAShC,cAAC,MAAD,CACEC,OAAQhB,KAAKvB,MAAMuC,OACnBC,cAAe,CACbrB,IAAKI,KAAKR,MAAMH,UAAUO,IAC1BC,IAAKG,KAAKR,MAAMH,UAAUQ,KAE5BqB,OAAQ,CACNtB,IAAKI,KAAKR,MAAMH,UAAUO,IAC1BC,IAAKG,KAAKR,MAAMH,UAAUQ,KAR9B,SAWE,cAAC,SAAD,CACEsB,SAAU,CACRvB,IAAKI,KAAKR,MAAMH,UAAUO,IAC1BC,IAAKG,KAAKR,MAAMH,UAAUQ,gBA3FxC,GAAkCuB,aAmGnBC,6BAAiB,CAC9BC,OAAS,2CADID,CAEZ7C,G,QC5FY+C,MAZf,WACE,OACE,sBAAKf,UAAU,MAAf,UACE,iDACA,cAACgB,EAAD,IACA,cAACC,EAAA,EAAD,UACA,wBAAQC,OAAK,EAACC,WAAS,uCAAuCC,IAAI,6CCEzDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhD,MAAK,YAAkD,IAA/CiD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.14ef931a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Map, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // for google map places autocomplete\n      address: '',\n\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n  \n      mapCenter: {\n        lat: 49.2827291,\n        lng: -123.1207375\n      }\n    };\n  }\n\n  handleChange = address => {\n    this.setState({ address });\n  };\n \n  handleSelect = address => {\n    this.setState({ address });\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => {\n        console.log('Success', latLng);\n\n        // update center state\n        this.setState({ mapCenter: latLng });\n      })\n      .catch(error => console.error('Error', error));\n  };\n \n  render() {\n    return (\n      <div id='googleMaps'>\n        <PlacesAutocomplete\n          value={this.state.address}\n          onChange={this.handleChange}\n          onSelect={this.handleSelect}\n        >\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n            <div>\n              <input\n                {...getInputProps({\n                  placeholder: 'Search Places ...',\n                  className: 'location-search-input',\n                })}\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {loading && <div>Loading...</div>}\n                {suggestions.map(suggestion => {\n                  const className = suggestion.active\n                    ? 'suggestion-item--active'\n                    : 'suggestion-item';\n                  // inline style for demonstration purpose\n                  const style = suggestion.active\n                    ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                    : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                  return (\n                    <div\n                      {...getSuggestionItemProps(suggestion, {\n                        className,\n                        style,\n                      })}\n                    >\n                      <span>{suggestion.description}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </PlacesAutocomplete>\n\n        <Map \n          google={this.props.google}\n          initialCenter={{\n            lat: this.state.mapCenter.lat,\n            lng: this.state.mapCenter.lng\n          }}\n          center={{\n            lat: this.state.mapCenter.lat,\n            lng: this.state.mapCenter.lng\n          }}\n        >\n          <Marker \n            position={{\n              lat: this.state.mapCenter.lat,\n              lng: this.state.mapCenter.lng\n            }} />\n        </Map>\n      </div>\n    )\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: ('AIzaSyBAHZn_A3HiyVsuKa9ha0EWDadF9xJh5iQ')\n})(MapContainer)","import './App.css';\nimport GoogleMap from './components/GoogleMap';\nimport {Helmet} from \"react-helmet\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Google Maps App</h1>\n      <GoogleMap />\n      <Helmet>\n      <script defer data-key=\"6aead1cb-199e-4174-88d5-9fef74d734c0\" src=\"https://widget.tochat.be/bundle.js\"></script>        \n       </Helmet>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}